// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sso/v1/sso.proto

package sso

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterRequestV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestV1MultiError, or nil if none found.
func (m *RegisterRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RegisterRequestV1ValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 128 {
		err := RegisterRequestV1ValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestV1MultiError(errors)
	}

	return nil
}

func (m *RegisterRequestV1) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RegisterRequestV1) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RegisterRequestV1MultiError is an error wrapping multiple validation errors
// returned by RegisterRequestV1.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestV1MultiError) AllErrors() []error { return m }

// RegisterRequestV1ValidationError is the validation error returned by
// RegisterRequestV1.Validate if the designated constraints aren't met.
type RegisterRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestV1ValidationError) ErrorName() string {
	return "RegisterRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestV1ValidationError{}

// Validate checks the field values on RegisterResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseV1MultiError, or nil if none found.
func (m *RegisterResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return RegisterResponseV1MultiError(errors)
	}

	return nil
}

// RegisterResponseV1MultiError is an error wrapping multiple validation errors
// returned by RegisterResponseV1.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseV1MultiError) AllErrors() []error { return m }

// RegisterResponseV1ValidationError is the validation error returned by
// RegisterResponseV1.Validate if the designated constraints aren't met.
type RegisterResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseV1ValidationError) ErrorName() string {
	return "RegisterResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseV1ValidationError{}

// Validate checks the field values on LoginRequestV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequestV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestV1MultiError,
// or nil if none found.
func (m *LoginRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LoginRequestV1ValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 128 {
		err := LoginRequestV1ValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 128 {
		err := LoginRequestV1ValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestV1MultiError(errors)
	}

	return nil
}

func (m *LoginRequestV1) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginRequestV1) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginRequestV1MultiError is an error wrapping multiple validation errors
// returned by LoginRequestV1.ValidateAll() if the designated constraints
// aren't met.
type LoginRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestV1MultiError) AllErrors() []error { return m }

// LoginRequestV1ValidationError is the validation error returned by
// LoginRequestV1.Validate if the designated constraints aren't met.
type LoginRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestV1ValidationError) ErrorName() string { return "LoginRequestV1ValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestV1ValidationError{}

// Validate checks the field values on LoginResponseV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginResponseV1MultiError, or nil if none found.
func (m *LoginResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginResponseV1MultiError(errors)
	}

	return nil
}

// LoginResponseV1MultiError is an error wrapping multiple validation errors
// returned by LoginResponseV1.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseV1MultiError) AllErrors() []error { return m }

// LoginResponseV1ValidationError is the validation error returned by
// LoginResponseV1.Validate if the designated constraints aren't met.
type LoginResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseV1ValidationError) ErrorName() string { return "LoginResponseV1ValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseV1ValidationError{}

// Validate checks the field values on IsRootRequestV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IsRootRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsRootRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsRootRequestV1MultiError, or nil if none found.
func (m *IsRootRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *IsRootRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 16 {
		err := IsRootRequestV1ValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsRootRequestV1MultiError(errors)
	}

	return nil
}

// IsRootRequestV1MultiError is an error wrapping multiple validation errors
// returned by IsRootRequestV1.ValidateAll() if the designated constraints
// aren't met.
type IsRootRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsRootRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsRootRequestV1MultiError) AllErrors() []error { return m }

// IsRootRequestV1ValidationError is the validation error returned by
// IsRootRequestV1.Validate if the designated constraints aren't met.
type IsRootRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsRootRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsRootRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsRootRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsRootRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsRootRequestV1ValidationError) ErrorName() string { return "IsRootRequestV1ValidationError" }

// Error satisfies the builtin error interface
func (e IsRootRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsRootRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsRootRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsRootRequestV1ValidationError{}

// Validate checks the field values on IsRootResponseV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IsRootResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsRootResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsRootResponseV1MultiError, or nil if none found.
func (m *IsRootResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *IsRootResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsRoot

	if len(errors) > 0 {
		return IsRootResponseV1MultiError(errors)
	}

	return nil
}

// IsRootResponseV1MultiError is an error wrapping multiple validation errors
// returned by IsRootResponseV1.ValidateAll() if the designated constraints
// aren't met.
type IsRootResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsRootResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsRootResponseV1MultiError) AllErrors() []error { return m }

// IsRootResponseV1ValidationError is the validation error returned by
// IsRootResponseV1.Validate if the designated constraints aren't met.
type IsRootResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsRootResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsRootResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsRootResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsRootResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsRootResponseV1ValidationError) ErrorName() string { return "IsRootResponseV1ValidationError" }

// Error satisfies the builtin error interface
func (e IsRootResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsRootResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsRootResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsRootResponseV1ValidationError{}
